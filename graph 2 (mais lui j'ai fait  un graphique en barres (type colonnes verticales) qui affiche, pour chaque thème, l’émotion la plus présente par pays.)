import pandas as pd
import plotly.express as px
from dash import Dash, dcc, html, Input, Output

# Données exemple
data = {
    "theme": ["économie", "économie", "économie", "politique", "politique", "politique"],
    "country": ["France", "Germany", "Italy", "France", "Germany", "Italy"],
    "emotion": ["joy", "sadness", "anger", "fear", "joy", "sadness"],
    "count": [20, 15, 10, 12, 25, 5]
}

df = pd.DataFrame(data)

# Couleurs personnalisées pour chaque émotion
emotion_colors = {
    "joy": "yellow",
    "sadness": "blue",
    "anger": "red",
    "fear": "purple",
    "surprise": "orange"
}

# Création de l'app Dash
app = Dash(__name__)

# Layout de l'application
app.layout = html.Div([
    html.H2("Analyse des émotions dominantes par thème et pays"),
    
    html.Label("Choisissez un thème :"),
    dcc.Dropdown(
        id='theme-dropdown',
        options=[{"label": theme, "value": theme} for theme in df["theme"].unique()],
        value=df["theme"].unique()[0]  # Thème sélectionné par défaut
    ),
    
    dcc.Graph(id='emotion-graph')
])

# Callback pour mettre à jour le graphique selon le thème sélectionné
@app.callback(
    Output("emotion-graph", "figure"),
    Input("theme-dropdown", "value")
)
def update_graph(selected_theme):
    filtered_df = df[df["theme"] == selected_theme]
    
    fig = px.bar(
        filtered_df,
        x="country",
        y="count",
        color="emotion",
        color_discrete_map=emotion_colors,
        title=f"Émotions dominantes dans le thème : {selected_theme}",
        labels={
            "country": "Pays",
            "count": "Nombre d’articles",
            "emotion": "Émotion dominante"
        },
        hover_data={"emotion": True, "count": True}
    )
    
    fig.update_layout(template="plotly_white", height=500)
    return fig

# Lancement du serveur
if __name__ == '__main__':
    app.run(debug=True)
